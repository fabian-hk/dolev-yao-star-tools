module {{ module_name }}

open Comparse
open DY.Core
open DY.Lib
open {{ total_code }}
open {{ total_proof }}
open {{ stateful_code }}

#set-options "--fuel 0 --ifuel 1 --z3rlimit 25  --z3cliopt 'smt.qi.eager_threshold=100'"

(*** Trace invariants ***)

(* TODO add trace invariants *)

instance protocol_invs: protocol_invariants = {
  crypto_invs = protocol_crypto_invs;
  trace_invs = admit();
}

(*** Proofs ***)
{% for (d, impl) in zip(declarations.keys(), impl_functions.keys()) %}
val {{ d }}:
 {% for arg in declarations[d] %} {{ arg.name }}:{{ arg.type }} ->{% endfor %}
  Lemma
  (requires
    trace_invariant tr
  )
  (ensures (
    let (_, tr_out) = {{ impl }}{% for arg in impl_functions[impl] %} {{ arg }}{% endfor %} tr in
    trace_invariant tr_out
  ))
  [SMTPat (trace_invariant tr); SMTPat ({{ impl }}{% for arg in impl_functions[impl] %} {{ arg }}{% endfor %} tr)]
let {{ d }} {% for arg in declarations[d] %}{{ arg.name }} {% endfor %}=
  (* TODO proof lemma *)
  admit();
  ()
{% endfor %}
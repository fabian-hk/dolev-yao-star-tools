module {{ module_name }}

open Comparse
open DY.Core
open DY.Lib
open {{ total_code }}
open {{ stateful_code }}

#set-options "--fuel 0 --ifuel 0 --z3cliopt 'smt.qi.eager_threshold=100'"

(*** Cryptographic invariants ***)

val crypto_usages_protocol: crypto_usages
instance crypto_usages_protocol = default_crypto_usages

#push-options "--ifuel 2 --fuel 0"
val crypto_predicates_protocol: crypto_predicates crypto_usages_protocol
let crypto_predicates_protocol = default_crypto_predicates crypto_usages_protocol
#pop-options

instance crypto_invariants_protocol: crypto_invariants = {
  usages = crypto_usages_protocol;
  preds = crypto_predicates_protocol;
}

(*** Proofs ***)
{% for d in declarations.keys() %}
val {{ d }}:
 {% for arg in declarations[d] %} {{ arg.name }}:{{ arg.type }} ->{% endfor %}
  Lemma
  (requires
    (* TODO add preconditions *)
    admit()
  )
  (ensures
    (* TODO add post-conditions *)
    admit()
  )
let {{ d }} {% for arg in declarations[d] %}{{ arg.name }} {% endfor %}=
  (* TODO proof lemma *)
  admit();
  ()
{% endfor %}